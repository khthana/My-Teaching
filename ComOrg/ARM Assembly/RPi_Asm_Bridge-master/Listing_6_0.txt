	.global	_start		@ Provide program starting address to linker
_start:	mov	R0,#0xA7	@ An arbitrary sample hex value for testing
	mov	R2,#0		@ Don't display any leading zeroes.
	bl	v_hex		@ Call subroutine to view hexadecimal value of R0 in ASCII.
	mov	R0,#0		@ Exit Status code set to 0 indicates "normal completion"
	mov	R7,#1		@ Service command code (1) will terminate this program
	svc	0		@ Issue Linux command to terminate program

@	Subroutine v_hex will display a 32-bit register in binary digits
@		R0: contains a number to be displayed in hexadecimal
@		R2: Number of nibbles to be displayed (from right side of R0)
@		    Note: If R2=0 or R2>8, leading zeroes (on left) will not be displayed.
@		LR: Contains the return address
@		All register contents will be preserved

v_hex:	push	{R0-R7}		@ Save contents of registers R0 through R7.
	mov	R3,R0		@ R3 will hold a copy of input word to be displayed.
	mov	R4,#0b1111	@ Used to mask off 4 bits at a time for display
	mov	R6,R2,lsl#2	@ Load number of bits to display (4 bits for each nibble)

@	Set up registers for calling Linux to display 1 character on the display monitor.

	ldr	R5,=dig		@ Pointer to the "012...EF" string of ASCII characters.
	mov	R2,#1		@ Number of characters to be displayed at a time.
	mov	R0,#1		@ Code for stdout (standard output, i.e., monitor display)
	mov	R7,#4		@ Linux service command code to write string.

@	Determine number of bits to be output (R6 has that value if its between 4 and 32).

	cmp	R6,#32		@ Test error value entered (there's only 32 bits in register).
	movhi	R6,#0		@ Default to omitting leading zeroes if value > 32.
	subs	R6,#4		@ Set R6 point to "right" side of first nibble to output.
	bge	nxthex		@ If proper range, then skip over finding first non-zero.	

@	Skip over leading zeroes (on left)

	mov	R6,#28		@ Number of bits in register - number of bits per hex digit
nxtzer:	ands	R1,R4,R3,LSR R6	@ Select next hex digit (0 .. F) to be displayed.
	bne	nxthex		@ Go write first non-zero hex digit.
	subs	R6,#4		@ Decrement number of nibbles remaining to display
	bgt	nxtzer		@ Go check next nibble, but not 1's column (i.e., value = 0)

@	Loop through groups of 4-bit nibbles and output each to stdout (monitor).

nxthex:	and	R1,R4,R3,LSR R6	@ Select next hex digit (0 .. F) to be displayed.
	add	R1,R5		@ Set R1 pointing to "0", "1", ... or "F" in memory
	svc	0		@ Linux service command code to write string.
	subs	R6,#4		@ Decrement number of bits remaining to display
	bge	nxthex		@ Go display next nibble until max bit-count reached

	pop	{R0-R7}		@ Restore saved register contents
	bx	LR		@ Return to the calling program

	.data
dig:	.ascii	"0123456789"	@ ASCII string of digits 0 through 9
	.ascii	"ABCDEF"	@ ASCII string of digits A through F
	.end
